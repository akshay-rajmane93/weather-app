{"version":3,"sources":["Tempdata.jsx","App.jsx","index.js"],"names":["Tempdata","useState","lat","setLat","long","setLong","city","setCity","search","setSearch","data","setData","useEffect","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","alert","console","log","fetch","process","url","json","rjson","fetchdata","response","resjson","fetchapi","className","type","value","onChange","e","target","placeholder","main","name","sys","country","temp","src","weather","icon","alt","temp_min","temp_max","humidity","class","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ffa34d5.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n\r\n\r\n\r\n\r\nconst Tempdata =()=>{\r\n  \r\n    const [lat, setLat] = useState([]);\r\n    const [long, setLong] = useState([]);\r\n    \r\n     const [city,setCity]=useState({});\r\n    const[search,setSearch] = useState(\"\");\r\n   \r\n    const [data,setData]=useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchdata =async()=>{\r\n            if(navigator.geolocation){\r\n            navigator.geolocation.getCurrentPosition(function(position) {\r\n          setLat(position.coords.latitude);\r\n          setLong(position.coords.longitude);\r\n        })}\r\n        else{\r\n                setLat(18.5196);\r\n                setLong(73.8553);\r\n                alert(\"You have disabled location service.\");\r\n            }\r\n        console.log(\"Latitude is:\", lat);\r\n        console.log(\"Longitude is:\", long);\r\n       const url = await fetch (`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&units=metric&appid=${process.env.REACT_APP_API_KEY}`);\r\n       const rjson = await url.json();\r\n       setData(rjson);\r\n       console.log(rjson);\r\n    }\r\n    fetchdata();\r\n      }, [lat, long]);\r\n     \r\n    useEffect(()=>{\r\n        const fetchapi =async()=>{\r\n             const url = `https://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=${process.env.REACT_APP_API_KEY}`;\r\n            const response = await fetch(url);\r\n            const resjson = await response.json();\r\n            console.log(resjson);\r\n            setCity(resjson);\r\n            console.log(resjson);\r\n            console.log(process.env);\r\n        };\r\n        fetchapi();\r\n    },[search])\r\n\r\n    const inputval =(e)=>{\r\n        setSearch(e.target.value);\r\n    }\r\n\r\n    return(<>\r\n        <div className=\"main\">\r\n        <div className=\"box\">\r\n            <div className=\"inputbox\">\r\n                <input type=\"search\" className=\"inputfeild\" value={search} onChange={inputval} placeholder=\"Enter City Name\"/>\r\n            </div>\r\n            \r\n       {!search?(!data.main?(<div className=\"nodata1\"><p className=\"loading\"></p><p>Please Wait...</p></div>):(<>\r\n            <div className=\"info\">\r\n            <h2 className=\"location\">\r\n                <i className=\"fas fa-street-view\"></i> {data.name},{data.sys.country}\r\n            </h2>\r\n             \r\n            <h1 className=\"temp\">\r\n            {data.main.temp>20?<i class=\"fas fa-thermometer-three-quarters\"></i>:<i class=\"fas fa-thermometer-quarter\"></i>}{data.main.temp}Â°C  \r\n            </h1>\r\n            <div className=\"immg\">\r\n            <img src={'https://openweathermap.org/img/wn/'+data.weather[0].icon+'.png'} alt=\"..\"/>\r\n            </div>\r\n            <h3 className=\"tempin_max\">\r\n                 min:{data.main.temp_min}Â°C || max:{data.main.temp_max}Â°C \r\n            </h3>\r\n            <p className=\"sunrise_set\"> Humidity : {data.main.humidity}% </p>\r\n          \r\n        \r\n             <h3 className=\"wheater_condition\">Weather : {data.weather[0].main}</h3> \r\n            \r\n               \r\n        </div>\r\n        </>)):( !city.main?(<div className=\"nodata\"><p className=\"nodata\">No data found for your result ðŸ˜ž</p></div>):(<>\r\n            <div className=\"info\">\r\n            <h2 className=\"location\">\r\n                <i className=\"fas fa-street-view\"></i> {city.name},{city.sys.country}\r\n            </h2>\r\n         \r\n            <h1 className=\"temp\">\r\n            {city.main.temp >= 20?(<i className=\"fas fa-thermometer-three-quarters\"></i>):(<i className=\"fas fa-thermometer-quarter\"></i>)} {city.main.temp}Â°C \r\n            </h1>\r\n            <div className=\"immg\">\r\n            <img src={'https://openweathermap.org/img/wn/'+city.weather[0].icon+'.png'} alt=\"..\"/>\r\n            </div>\r\n            <h3 className=\"tempin_max\">\r\n                 min:{city.main.temp_min}Â°C || max:{city.main.temp_max}Â°C \r\n\r\n            </h3>\r\n            <p className=\"sunrise_set\"> Humidity : {data.main.humidity}Â°C </p>\r\n            \r\n             <h3 className=\"wheater_condition\">Weather : {city.weather[0].main}</h3> \r\n            \r\n             \r\n        </div>\r\n        </>))}\r\n        </div>\r\n        </div>\r\n    </>);\r\n}\r\n\r\n\r\nexport default Tempdata;","import React from 'react';\r\nimport Tempapp from './Tempdata';\r\n\r\nconst App =()=>{\r\n    return(<><Tempapp/></>)\r\n}\r\n\r\n\r\nexport default App;","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\";\n\n\nReactDOM.render(<><App/></>\n  ,document.getElementById('root'));\n\n "],"sourceRoot":""}